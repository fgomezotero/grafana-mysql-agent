node {
  checkout scm
  stage('Deploy mysql-client') {
    openshiftScale depCfg: 'mysql-client', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '300000'
    sh 'oc delete deploymentconfig,services,routes -l app=grafana'
    openshiftVerifyDeployment depCfg: 'mysql-client', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '300', waitUnit: 'sec'
  }
  stage('Deploy DB-Agent'){
    sh "oc get pod | grep -i mysql-client | awk '{print \$1}' > podclient"
    def podmysqlclient = readFile('podclient').trim() 
    sh "oc cp mysql-agent/my2.sql $podmysqlclient:/var/lib/mysql/"
    sh "oc rsh $podmysqlclient /opt/rh/rh-mysql57/root/usr/bin/mysql --host=${env.MYSQL_HOST} --port=${env.MYSQL_PORT} --user=root --password=${env.MYSQL_ADMIN_PASSWORD} <<-EOF\n source /var/lib/mysql/my2.sql;\nEOF"
  }
  stage('Test DB-Agent'){
    sh "oc get pod | grep -i mysql-client | awk '{print \$1}' > podclient"
    def podmysqlclient = readFile('podclient').trim()     
    withEnv(["USERNAME=my2","PASSWORD=my2grafanareader"]){
      sh "oc rsh $podmysqlclient /opt/rh/rh-mysql57/root/usr/bin/mysql --host=${env.MYSQL_HOST} --port=${env.MYSQL_PORT} --user=$USERNAME --password=$PASSWORD <<-EOF\n show databases;\nEOF"
    }
  }
  stage('Delete mysql-client'){
    sh 'oc scale deploymentconfig mysql-client --replicas=0'
    openshiftVerifyDeployment depCfg: 'mysql-client', replicaCount: '0', verbose: 'false', verifyReplicaCount: 'true', waitTime: '300', waitUnit: 'sec'
  }
  stage('Build Custom-Grafana'){
   sh 'oc start-build custom-grafana'
   openshiftVerifyBuild bldCfg: 'custom-grafana', checkForTriggeredDeployments: 'false', verbose: 'false', waitTime: '300000'
  }
  stage('Deploy Custom-Grafana'){
   sh 'oc new-app custom-grafana -l app=grafana'
   openshiftVerifyDeployment depCfg: 'custom-grafana', replicaCount: '1', verifyReplicaCount: 'true', waitTime: '300', waitUnit: 'sec'
   sh 'oc expose svc/custom-grafana'
  }
}

